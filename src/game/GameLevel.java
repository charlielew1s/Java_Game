package game;

import city.cs.engine.*;
import city.cs.engine.Shape;
import org.jbox2d.common.Vec2;

import javax.sound.sampled.LineUnavailableException;
import javax.sound.sampled.UnsupportedAudioFileException;
import java.awt.*;
import java.awt.event.KeyListener;
import java.awt.event.MouseListener;
import java.io.IOException;
import java.util.logging.Level;

/**
 * The base class for all levels in the game. The objects common to all levels are generated by this class.
 */

public abstract class GameLevel extends World implements CollisionListener, MouseListener, KeyListener {
    /**
     * Game reference used to change levels
     */
    protected Game game;
    /**
     * Reference to the specific heli dropper
     */
    protected HeliDropper heliDropper;
    /**
     * Used to determine what the current level is
     */
    protected LevelType levelType;
    /**
     * The image specific to any given level
     */
    protected Image background;
    /**
     * A static body that Sunmi runs on shared by all levels
     */
    protected StaticBody ground;
    /**
     * Used in every level when a falling generic character (hater or supporter) hits the ground
     */
    protected SoundClip splat;

    /**
     * The only constructor for the GameLevel class. It takes as its only argument a Game reference.
     *
     * @param game reference to Game Object so that we can call Game methods to change the level.
     */
    public GameLevel(Game game) {
        super();
        this.game = game;
        Shape groundShape = new BoxShape(100, 0.5f);
        ground = new StaticBody(this, groundShape);
        ground.setPosition(new Vec2(0f, -10.5f));
        ground.setFillColor(Color.MAGENTA);
        ScoreKeeper.resetScore();
        try {
            splat = new SoundClip("data/Splat-SoundBible.com-1826190667.mp3");
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * Abstract method needed to be implemented in sub-classes
     *
     * @return true when the conditions are met to go to the next level
     */
    public abstract boolean isComplete();

    /**
     * Abstract method needed to get the background image for the current level
     *
     * @return a background image
     */
    public abstract Image getBackgroundImage();

    /**
     * Public method used to determine the value of the Level Type enum specific to the current level
     *
     * @return the current level's Level Type object value
     */
    public LevelType getLevelType() {
        return levelType;
    }

    /**
     * Abstract void that stops the currently playing background music in the specific level
     */
    public abstract void stopBackgroundMusic();

    /**
     * drop a specific generic character into the field of view
     *
     * @param name the name of the character
     * @param pos  the character's position
     * @param gravityScale the character's force of gravity
     */
    public void dropSpecificCharacter(String name, Vec2 pos, float gravityScale) {
        heliDropper.dropSpecificCharacter(name, pos, gravityScale);
    }

    /**
     * Change Sunmi's position and direction
     * @param position Sunmi's new position
     * @param direction Sunmi's new direction
     */
    public abstract void setSunmiPosition(Vec2 position, String direction);
}
